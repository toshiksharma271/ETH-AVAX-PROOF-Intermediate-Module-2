##index.js

import { useState, useEffect } from "react";
import { ethers } from "ethers";
import assessment_abi from "../artifacts/contracts/Assessment.sol/Assessment.json";
import styles from "./styles.module.css";

export default function HomePage() {
  const bg = "https://picsum.photos/1920/1080";

  useEffect(() => {
    document.body.style.backgroundImage = `url('${bg}')`;
    document.body.style.backgroundSize = "cover";
    document.body.style.color = "white";
    document.body.style.fontFamily = "Arial, sans-serif";
    document.body.style.textAlign = "center";
    document.body.style.paddingTop = "50px";
  }, []);

  const [ethWallet, setEthWallet] = useState(undefined);
  const [account, setAccount] = useState(undefined);
  const [assessment, setAssessment] = useState(undefined);
  const [value, setValueState] = useState(0);
  const [message, setMessageState] = useState("Hello, world!");
  const [loadingValue, setLoadingValue] = useState(false);
  const [loadingMessage, setLoadingMessage] = useState(false);

  const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3"; 
  const assessmentABI = assessment_abi.abi;

  const getWallet = async () => {
    if (window.ethereum) {
      setEthWallet(window.ethereum);
      console.log("Ethereum wallet found");
    } else {
      console.log("No Ethereum wallet found");
    }

    if (ethWallet) {
      const accounts = await ethWallet.request({ method: "eth_accounts" });
      handleAccount(accounts);
    }
  };

  const handleAccount = (accounts) => {
    if (accounts.length > 0) {
      console.log("Account connected: ", accounts[0]);
      setAccount(accounts[0]);
    } else {
      console.log("No account found");
    }
  };

  const connectAccount = async () => {
    if (!ethWallet) {
      alert("MetaMask wallet is required to connect");
      return;
    }

    const accounts = await ethWallet.request({ method: "eth_requestAccounts" });
    handleAccount(accounts);

    getAssessmentContract();
  };

  const getAssessmentContract = () => {
    const provider = new ethers.providers.Web3Provider(ethWallet);
    const signer = provider.getSigner();
    const assessmentContract = new ethers.Contract(contractAddress, assessmentABI, signer);

    console.log("Assessment contract initialized:", assessmentContract);
    setAssessment(assessmentContract);
  };

  const fetchValue = async () => {
    if (assessment) {
      try {
        setLoadingValue(true);
        console.log("Fetching value...");
        const value = await assessment.getValue();
        setValueState(value.toNumber());
        console.log("Fetched value:", value.toNumber());
      } catch (error) {
        console.error("Error fetching value:", error);
      } finally {
        setLoadingValue(false);
      }
    }
  };

  const fetchMessage = async () => {
    if (assessment) {
      try {
        setLoadingMessage(true);
        console.log("Fetching message...");
        const message = await assessment.getMessage();
        setMessageState(message);
        console.log("Fetched message:", message);
      } catch (error) {
        console.error("Error fetching message:", error);
      } finally {
        setLoadingMessage(false);
      }
    }
  };

  const updateValue = async () => {
    if (assessment) {
      const newValue = prompt("Enter new value:");
      if (newValue) {
        try {
          const tx = await assessment.setValue(Number(newValue));
          await tx.wait();
          console.log("Value updated, fetching new value...");
          await fetchValue();
        } catch (error) {
          console.error("Error setting value:", error);
        }
      }
    }
  };

  const updateMessage = async () => {
    if (assessment) {
      const newMessage = prompt("Enter new message:");
      if (newMessage) {
        try {
          const tx = await assessment.setMessage(newMessage);
          await tx.wait();
          console.log("Message updated, fetching new message...");
          await fetchMessage();
        } catch (error) {
          console.error("Error setting message:", error);
        }
      }
    }
  };

  const initUser = () => {
    if (!ethWallet) {
      return <p>Please install MetaMask in order to use this application.</p>;
    }

    if (!account) {
      return <button className={styles.btn} onClick={connectAccount}>Please connect your MetaMask wallet</button>;
    }

    return (
      <div className={styles.card}>
        <p><strong>Your Account:</strong> {account}</p>
        <p><strong>Stored Value:</strong> {loadingValue ? "Loading..." : value !== undefined ? value : "Not available"}</p>
        <button className={styles.btn} onClick={updateValue}>Update Value</button>
        <p><strong>Stored Message:</strong> {loadingMessage ? "Loading..." : message !== undefined ? message : "Not available"}</p>
        <button className={styles.btn} onClick={updateMessage}>Update Message</button>
      </div>
    );
  };

  useEffect(() => {
    getWallet();
  }, []);

  useEffect(() => {
    if (account && assessment) {
      console.log("Fetching initial values...");
      fetchValue();
      fetchMessage();
    }
  }, [account, assessment]);

  return (
    <main className={styles.container}>
      <header><h1>Welcome to the Assessment dApp!</h1></header>
      {initUser()}
    </main>
  );
}


##solidity file 

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Assessment {
    uint256 private value;
    string private message;

    function getValue() public view returns (uint256) {
        return value;
    }

    function getMessage() public view returns (string memory) {
        return message;
    }

    function setValue(uint256 newValue) public {
        value = newValue;
    }

    function setMessage(string memory newMessage) public {
        message = newMessage;
    }
}


##deploy.js

async function main() {
  const [deployer] = await ethers.getSigners();
  console.log("Deploying contracts with the account:", deployer.address);

  const Assessment = await ethers.getContractFactory("Assessment");
  const assessment = await Assessment.deploy();
  console.log("Assessment contract deployed to:", assessment.address);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});

##css file 

/* styles.module.css */

.container {
  text-align: center;
  color: white;
  padding: 2rem;
}

.btn {
  margin: 0.5rem;
  padding: 0.5rem 1rem;
  font-size: 1rem;
  background-color: #0c072b;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.btn:hover {
  background-color: #0056b3;
}

.card {
  background: rgba(0, 0, 0, 0.5);
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
  text-align: left;
  width: 80%; /* Adjust width as needed */
  max-width: 600px; /* Set a maximum width */
  margin: auto;
}

.card p {
  margin: 10px 0;
  white-space: pre-wrap; /* Preserve line breaks and wrap text */
}

.card strong {
  color: #ffdd57;
}

##json file abi(artifacts)

{
  "_format": "hh-sol-artifact-1",
  "contractName": "Assessment",
  "sourceName": "contracts/Assessment.sol",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "getMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "setMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50600080819055506040518060400160405280600d81526020017f48656c6c6f2c20776f726c64210000000000000000000000000000000000000081525060019080519060200190610063929190610069565b5061016d565b8280546100759061010c565b90600052602060002090601f01602090048101928261009757600085556100de565b82601f106100b057805160ff19168380011785556100de565b828001600101855582156100de579182015b828111156100dd5782518255916020019190600101906100c2565b5b5090506100eb91906100ef565b5090565b5b808211156101085760008160009055506001016100f0565b5090565b6000600282049050600182168061012457607f821691505b602082108114156101385761013761013e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61048d8061017c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632096525514610051578063368b87721461006f578063552410771461008b578063ce6d41de146100a7575b600080fd5b6100596100c5565b604051610066919061035a565b60405180910390f35b61008960048036038101906100849190610282565b6100ce565b005b6100a560048036038101906100a091906102c7565b6100e4565b005b6100af6100ee565b6040516100bc9190610338565b60405180910390f35b60008054905090565b8181600191906100df929190610180565b505050565b8060008190555050565b6060600180546100fd906103ce565b80601f0160208091040260200160405190810160405280929190818152602001828054610129906103ce565b80156101765780601f1061014b57610100808354040283529160200191610176565b820191906000526020600020905b81548152906001019060200180831161015957829003601f168201915b5050505050905090565b82805461018c906103ce565b90600052602060002090601f0160209004810192826101ae57600085556101f5565b82601f106101c757803560ff19168380011785556101f5565b828001600101855582156101f5579182015b828111156101f45782358255916020019190600101906101d9565b5b5090506102029190610206565b5090565b5b8082111561021f576000816000905550600101610207565b5090565b60008083601f84011261023557600080fd5b8235905067ffffffffffffffff81111561024e57600080fd5b60208301915083600182028301111561026657600080fd5b9250929050565b60008135905061027c81610440565b92915050565b6000806020838503121561029557600080fd5b600083013567ffffffffffffffff8111156102af57600080fd5b6102bb85828601610223565b92509250509250929050565b6000602082840312156102d957600080fd5b60006102e78482850161026d565b91505092915050565b60006102fb82610375565b6103058185610380565b935061031581856020860161039b565b61031e8161042f565b840191505092915050565b61033281610391565b82525050565b6000602082019050818103600083015261035281846102f0565b905092915050565b600060208201905061036f6000830184610329565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b60005b838110156103b957808201518184015260208101905061039e565b838111156103c8576000848401525b50505050565b600060028204905060018216806103e657607f821691505b602082108114156103fa576103f9610400565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b61044981610391565b811461045457600080fd5b5056fea2646970667358221220bfebd31255cd29277e37497bd518080664bb09930429f3d69dec0ff773e4d6ce64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632096525514610051578063368b87721461006f578063552410771461008b578063ce6d41de146100a7575b600080fd5b6100596100c5565b604051610066919061035a565b60405180910390f35b61008960048036038101906100849190610282565b6100ce565b005b6100a560048036038101906100a091906102c7565b6100e4565b005b6100af6100ee565b6040516100bc9190610338565b60405180910390f35b60008054905090565b8181600191906100df929190610180565b505050565b8060008190555050565b6060600180546100fd906103ce565b80601f0160208091040260200160405190810160405280929190818152602001828054610129906103ce565b80156101765780601f1061014b57610100808354040283529160200191610176565b820191906000526020600020905b81548152906001019060200180831161015957829003601f168201915b5050505050905090565b82805461018c906103ce565b90600052602060002090601f0160209004810192826101ae57600085556101f5565b82601f106101c757803560ff19168380011785556101f5565b828001600101855582156101f5579182015b828111156101f45782358255916020019190600101906101d9565b5b5090506102029190610206565b5090565b5b8082111561021f576000816000905550600101610207565b5090565b60008083601f84011261023557600080fd5b8235905067ffffffffffffffff81111561024e57600080fd5b60208301915083600182028301111561026657600080fd5b9250929050565b60008135905061027c81610440565b92915050565b6000806020838503121561029557600080fd5b600083013567ffffffffffffffff8111156102af57600080fd5b6102bb85828601610223565b92509250509250929050565b6000602082840312156102d957600080fd5b60006102e78482850161026d565b91505092915050565b60006102fb82610375565b6103058185610380565b935061031581856020860161039b565b61031e8161042f565b840191505092915050565b61033281610391565b82525050565b6000602082019050818103600083015261035281846102f0565b905092915050565b600060208201905061036f6000830184610329565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b60005b838110156103b957808201518184015260208101905061039e565b838111156103c8576000848401525b50505050565b600060028204905060018216806103e657607f821691505b602082108114156103fa576103f9610400565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b61044981610391565b811461045457600080fd5b5056fea2646970667358221220bfebd31255cd29277e37497bd518080664bb09930429f3d69dec0ff773e4d6ce64736f6c63430008000033",
  "linkReferences": {},
  "deployedLinkReferences": {}
}


